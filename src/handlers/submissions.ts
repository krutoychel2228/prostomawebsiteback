import { Request, Response } from "express"
import nodemailer from 'nodemailer'
import TelegramBot from 'node-telegram-bot-api'
import dotenv from 'dotenv'
import { SubmissionModel } from "../mongoose/schemas/Submission"
import { IUser } from "../mongoose/schemas/User"
import mongoose from "mongoose"

dotenv.config()

const telegramToken = process.env.TELEGRAM_BOT_TOKEN
const telegramGroupId = process.env.TELEGRAM_GROUP_ID
const bot = new TelegramBot(telegramToken!)

function isValidEmail(email: string): boolean {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return re.test(email)
}

export const submitQuestion = async (req: Request, res: Response) => {
    try {
        const { name, email, question } = req.body

        if (!name || !email || !question) {
            res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" })
            return
        }

        if (!isValidEmail(email)) {
            res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email" })
            return
        }

        const newSubmission = new SubmissionModel({
            name,
            email,
            question,
            status: "unread"
        })

        await newSubmission.save()

        const mailOptions = {
            from: process.env.EMAIL_USERNAME,
            to: process.env.ADMIN_USERNAME,
            subject: '–û—Å—Ç–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å',
            text: `
                –ù–∞ –ø–æ—Ä—Ç–∞–ª–µ prostoma –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:
                ID: ${newSubmission.displayId}
                –ò–º—è: ${name}
                –ü–æ—á—Ç–∞: ${email}
                –í–æ–ø—Ä–æ—Å: ${question}
            `,
            html: `
                <h1>–ù–∞ –ø–æ—Ä—Ç–∞–ª–µ prostoma –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</h1>
                <p><strong>ID:</strong> ${newSubmission.displayId}</p>
                <p><strong>–ò–º—è:</strong> ${name}</p>
                <p><strong>–ü–æ—á—Ç–∞:</strong> ${email}</p>
                <p><strong>–í–æ–ø—Ä–æ—Å:</strong> ${question}</p>
            `
        }

        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.GMAIL_USERNAME,
                pass: process.env.GMAIL_APP_PASSWORD
            }
        })
        await transporter.sendMail(mailOptions)
        await bot.sendMessage(
            telegramGroupId!,
            `üì¢ –û—Å—Ç–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\nID: ${newSubmission.displayId}\n–ò–º—è: ${name}\n–ü–æ—á—Ç–∞: ${email}\n–í–æ–ø—Ä–æ—Å: ${question}`
        )

        res.status(200).json({ message: "Question submitted successfully" })

    } catch (error) {
        console.error('Error:', error)
        res.status(500).json({ message: 'Server error' })
    }
}

export const submitAppointmentRequest = async (req: Request, res: Response) => {
    try {
        const { name, phone } = req.body

        if (!name || !phone) {
            res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" })
            return
        }

        const newSubmission = new SubmissionModel({
            name,
            phone,
            status: "unread"
        })


        await newSubmission.save()

        const mailOptions = {
            from: process.env.EMAIL_USERNAME,
            to: process.env.ADMIN_USERNAME,
            subject: '–û—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å',
            text: `
                –ù–∞ –ø–æ—Ä—Ç–∞–ª–µ prostoma –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:
                ID: ${newSubmission.displayId}
                –ò–º—è: ${name}
                –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
            `,
            html: `
                <h1>–ù–∞ –ø–æ—Ä—Ç–∞–ª–µ prostoma –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å</h1>
                <p><strong>ID:</strong> ${newSubmission.displayId}</p>
                <p><strong>–ò–º—è:</strong> ${name}</p>
                <p><strong>–ü–æ—á—Ç–∞:</strong> ${phone}</p>
            `
        }

        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.GMAIL_USERNAME,
                pass: process.env.GMAIL_APP_PASSWORD
            }
        })

        await transporter.sendMail(mailOptions)
        await bot.sendMessage(
            telegramGroupId!,
            `üì¢ –û—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\nID: ${newSubmission.displayId}\n–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`
        )

        res.status(200).json({ message: "Question submitted successfully" })

    } catch (error) {
        console.error('Error:', error)
        res.status(500).json({ message: 'Server error' })
    }
}

export const getSubmissions = async (req: Request, res: Response) => {
    try {
        const user = req.user as IUser
        if (!user || !user.admin) {
            res.status(403).json({
                success: false,
                message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            })
            return
        }

        const { displayId } = req.query

        const query: any = {}
        if (displayId && !isNaN(Number(displayId))) {
            query.displayId = Number(displayId)
        }

        const submissions = await SubmissionModel.find(query)
            .sort({ createdAt: -1 })
            .lean()

        res.status(200).json({
            success: true,
            data: submissions.map(sub => ({
                ...sub,
                _id: sub._id.toString(),
                email: sub.email || null,
                phone: sub.phone || null
            }))
        })

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error)
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤'
        })
    }
}

export const switchSubmissionStatus = async (req: Request, res: Response) => {
    try {
        const user = req.user as IUser

        if (!user) {
            res.status(401).json({ success: false, message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' })
            return
        }

        if (!user.admin) {
            res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' })
            return
        }

        const submissionId = req.params.id

        if (!mongoose.Types.ObjectId.isValid(submissionId)) {
            res.status(400).json({ success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞' })
            return
        }

        const submission = await SubmissionModel.findById(submissionId)

        if (!submission) {
            res.status(404).json({ success: false, message: '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
            return
        }

        const newStatus = submission.status === 'read' ? 'unread' : 'read'

        const updatedSubmission = await SubmissionModel.findByIdAndUpdate(
            submissionId,
            {
                $set: { status: newStatus },
                $currentDate: { updatedAt: true }
            },
            { new: true }
        )

        res.status(200).json({
            success: true,
            message: `–°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${newStatus === 'read' ? '–ø—Ä–æ—á–∏—Ç–∞–Ω–æ' : '–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ'}"`,
            data: {
                _id: updatedSubmission?._id,
                displayId: updatedSubmission?.displayId,
                status: updatedSubmission?.status,
                updatedAt: updatedSubmission?.updatedAt
            }
        })
        return

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞:", error)
        res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
        return
    }
}